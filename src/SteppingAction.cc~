//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// -------------------------------------------------------------------
// $Id: SteppingAction.cc,v 1.1 2012-09-21 mraine Exp $
// -------------------------------------------------------------------

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

#include "Analysis.hh"

#include "SteppingAction.hh"
#include "B2RunAction.hh"
#include "B2aDetectorConstruction.hh"
#include "B2PrimaryGeneratorAction.hh"
#include "G4RunManager.hh"
#include "G4SystemOfUnits.hh"
#include "G4SteppingManager.hh"
#include "G4VTouchable.hh"
#include "G4VPhysicalVolume.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

SteppingAction::SteppingAction()
{}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

SteppingAction::~SteppingAction()
{}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

void SteppingAction::UserSteppingAction(const G4Step* step)
{
 G4double eventNumber=0;
 G4double flagParticle=0.;
 G4double flagProcess=0.;
 G4double trackid;
 G4double x,y,z,xp,yp,zp;
 G4ThreeVector pos1, pos2,volumepos,res;
 
 G4TouchableHandle touch1,touch2;
 G4String name1,name2;
 if (step->GetTrack()->GetDynamicParticle()->GetDefinition() ->GetParticleName() == "e-"){
   flagParticle = 1;
   trackid=step->GetTrack()->GetTrackID();}
 if (step->GetTrack()->GetDynamicParticle()->GetDefinition() ->GetParticleName() == "proton")  	  flagParticle = 2;
 if (step->GetTrack()->GetDynamicParticle()->GetDefinition() ->GetParticleName() == "GenericIon")    flagParticle = 3;
 if (step->GetTrack()->GetDynamicParticle()->GetDefinition() ->GetParticleName() == "mu-")    flagParticle = 4;

 if (step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()=="msc")				flagProcess =10;
 if (step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()=="e-_G4MicroElecElastic")		flagProcess =11;
 if (step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()=="e-_G4MicroElecInelastic")	flagProcess =12;
 if (step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()=="eCapture")			flagProcess =13;

 if (step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()=="p_G4MicroElecInelastic")	flagProcess =14;

 if (step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()=="ion_G4MicroElecInelastic")	flagProcess =15;

 if (step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()=="hIoni")				 flagProcess =16;
 if (step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()=="eIoni")                               flagProcess =17;
 if (step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()=="muIoni")                              flagProcess =18;
 if (step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()!="Transportation")
 // if (step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()=="eIoni" ||
 //    step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()=="muIoni")
 {  
   /**   pos1 = step->GetPreStepPoint()->GetPosition();
   pos2 = step->GetPostStepPoint()->GetPosition();
   touch1 = pos1->GetTouchableHandle();
   touch2 = pos2->GetTouchableHandle();
   name1 = touch1->GetVolume->GetName();
   name2 = touch2->GetVolume->GetName();
   **/
   x=step->GetPreStepPoint()->GetPosition().x()/micrometer;// /nanometer;
   y=step->GetPreStepPoint()->GetPosition().y()/micrometer;// /nanometer;
   z=step->GetPreStepPoint()->GetPosition().z()/micrometer;// /nanometer;
   xp=step->GetPostStepPoint()->GetPosition().x()/micrometer;// /nanometer;
   yp=step->GetPostStepPoint()->GetPosition().y()/micrometer;// /nanometer;
   zp=step->GetPostStepPoint()->GetPosition().z()/micrometer;// /nanometer;
   

   const G4Event* evt = G4RunManager::GetRunManager()->GetCurrentEvent();
   if(evt) eventNumber = evt->GetEventID();
   G4StepPoint* point1 = step->GetPreStepPoint();
   touch1 = point1->GetTouchableHandle();

   volumepos=touch1->GetTranslation();
   G4Double copyNumber = touch1->GetCopyNumber();


   G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();

   // fill ntuple
   analysisManager->FillNtupleDColumn(0, flagParticle);
   analysisManager->FillNtupleDColumn(1, flagProcess);
   analysisManager->FillNtupleDColumn(2, x);
   analysisManager->FillNtupleDColumn(3, y);
   analysisManager->FillNtupleDColumn(4, z);
   analysisManager->FillNtupleDColumn(5, step->GetTotalEnergyDeposit()/eV);
   analysisManager->FillNtupleDColumn(6, std::sqrt((x-xp)*(x-xp)+(y-yp)*(y-yp)+(z-zp)*(z-zp))/nm);
   analysisManager->FillNtupleDColumn(7, (step->GetPreStepPoint()->GetKineticEnergy() - step->GetPostStepPoint()->GetKineticEnergy())/eV );
   analysisManager->FillNtupleDColumn(8, eventNumber);
   analysisManager->FillNtupleDColumn(9, copyNumber);
   analysisManager->FillNtupleDColumn(10, trackid);
   analysisManager->AddNtupleRow();      
   }
}    
